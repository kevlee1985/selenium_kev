<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="1" skipped="0" tests="7" time="190.553" timestamp="2024-02-05T16:25:46.923512" hostname="NEW-UDHK2J5RVEL"><testcase classname="test_killer_uk.TestClass" name="test_verify_page_title" time="12.412" /><testcase classname="test_killer_uk.TestClass" name="test_user_navigates_to_login_screen" time="38.614" /><testcase classname="test_killer_uk.TestClass" name="test_login" time="14.446" /><testcase classname="test_killer_uk.TestClass" name="test_unsuccessful_login" time="17.722" /><testcase classname="test_killer_uk.TestClass" name="test_nav_to_create_account" time="16.323" /><testcase classname="test_killer_uk.TestClass" name="test_add_product_to_cart" time="26.244"><failure message="selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element &lt;button type=&quot;submit&quot; class=&quot;button login__button&quot; name=&quot;send&quot; id=&quot;send2&quot;&gt;...&lt;/button&gt; is not clickable at point (480, 605). Other element would receive the click: &lt;div class=&quot;ec-gtm-cookie-directive&quot; data-google=&quot;anowave gtm&quot; style=&quot;display: block;&quot;&gt;...&lt;/div&gt;&#10;  (Session info: chrome=120.0.6099.225)&#10;Stacktrace:&#10;&#09;GetHandleVerifier [0x011C6EE3+174339]&#10;&#09;(No symbol) [0x010F0A51]&#10;&#09;(No symbol) [0x00E06FF6]&#10;&#09;(No symbol) [0x00E3E48E]&#10;&#09;(No symbol) [0x00E3D09E]&#10;&#09;(No symbol) [0x00E3B5F8]&#10;&#09;(No symbol) [0x00E3AD7F]&#10;&#09;(No symbol) [0x00E32B4E]&#10;&#09;(No symbol) [0x00E5700C]&#10;&#09;(No symbol) [0x00E325B0]&#10;&#09;(No symbol) [0x00E57414]&#10;&#09;(No symbol) [0x00E6A104]&#10;&#09;(No symbol) [0x00E56DA6]&#10;&#09;(No symbol) [0x00E31034]&#10;&#09;(No symbol) [0x00E31F8D]&#10;&#09;GetHandleVerifier [0x01264B1C+820540]&#10;&#09;sqlite3_dbdata_init [0x013253EE+653550]&#10;&#09;sqlite3_dbdata_init [0x01324E09+652041]&#10;&#09;sqlite3_dbdata_init [0x013197CC+605388]&#10;&#09;sqlite3_dbdata_init [0x01325D9B+656027]&#10;&#09;(No symbol) [0x010FFE6C]&#10;&#09;(No symbol) [0x010F83B8]&#10;&#09;(No symbol) [0x010F84DD]&#10;&#09;(No symbol) [0x010E5818]&#10;&#09;BaseThreadInitThunk [0x766F7BA9+25]&#10;&#09;RtlInitializeExceptionChain [0x7796BD2B+107]&#10;&#09;RtlClearBits [0x7796BCAF+191]">self = &lt;test_killer_uk.TestClass object at 0x00000226F2D075E0&gt;, setup_teardown = &lt;selenium.webdriver.chrome.webdriver.WebDriver (session="636abcba553e5b32e6e9cd42b15f42a4")&gt;

    def test_add_product_to_cart(self, setup_teardown):
        driver = setup_teardown
        killer_methods = BrowserActions(driver)
        killer_methods.log_in("kev_lee2002@hotmail.com", "22Paignton")
&gt;       driver.find_element(By.XPATH, sv_killer.submit_login_button).click()

test_killer_uk.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
venv\lib\site-packages\selenium\webdriver\remote\webelement.py:94: in click
    self._execute(Command.CLICK_ELEMENT)
venv\lib\site-packages\selenium\webdriver\remote\webelement.py:395: in _execute
    return self._parent.execute(command, params)
venv\lib\site-packages\selenium\webdriver\remote\webdriver.py:347: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000226F2D5CFD0&gt;
response = {'status': 400, 'value': '{"value":{"error":"element click intercepted","message":"element click intercepted: Element ...dInitThunk [0x766F7BA9+25]\\n\\tRtlInitializeExceptionChain [0x7796BD2B+107]\\n\\tRtlClearBits [0x7796BCAF+191]\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -&gt; None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "&lt;anonymous&gt;")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "&lt;anonymous&gt;")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element &lt;button type="submit" class="button login__button" name="send" id="send2"&gt;...&lt;/button&gt; is not clickable at point (480, 605). Other element would receive the click: &lt;div class="ec-gtm-cookie-directive" data-google="anowave gtm" style="display: block;"&gt;...&lt;/div&gt;
E         (Session info: chrome=120.0.6099.225)
E       Stacktrace:
E       	GetHandleVerifier [0x011C6EE3+174339]
E       	(No symbol) [0x010F0A51]
E       	(No symbol) [0x00E06FF6]
E       	(No symbol) [0x00E3E48E]
E       	(No symbol) [0x00E3D09E]
E       	(No symbol) [0x00E3B5F8]
E       	(No symbol) [0x00E3AD7F]
E       	(No symbol) [0x00E32B4E]
E       	(No symbol) [0x00E5700C]
E       	(No symbol) [0x00E325B0]
E       	(No symbol) [0x00E57414]
E       	(No symbol) [0x00E6A104]
E       	(No symbol) [0x00E56DA6]
E       	(No symbol) [0x00E31034]
E       	(No symbol) [0x00E31F8D]
E       	GetHandleVerifier [0x01264B1C+820540]
E       	sqlite3_dbdata_init [0x013253EE+653550]
E       	sqlite3_dbdata_init [0x01324E09+652041]
E       	sqlite3_dbdata_init [0x013197CC+605388]
E       	sqlite3_dbdata_init [0x01325D9B+656027]
E       	(No symbol) [0x010FFE6C]
E       	(No symbol) [0x010F83B8]
E       	(No symbol) [0x010F84DD]
E       	(No symbol) [0x010E5818]
E       	BaseThreadInitThunk [0x766F7BA9+25]
E       	RtlInitializeExceptionChain [0x7796BD2B+107]
E       	RtlClearBits [0x7796BCAF+191]

venv\lib\site-packages\selenium\webdriver\remote\errorhandler.py:229: ElementClickInterceptedException</failure></testcase><testcase classname="test_killer_uk.TestClass" name="test_remove_product_from_cart" time="39.812" /></testsuite></testsuites>